
R Under development (unstable) (2014-03-08 r65144) -- "Unsuffered Consequences"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gsplom"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gsplom')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("adaptiveRegress")
> ### * adaptiveRegress
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: adaptiveRegress
> ### Title: High/Low binary partition by adaptive regression.
> ### Aliases: adaptiveRegress
> 
> ### ** Examples
> 
> v <- sample(1:100)
> R <- adaptiveRegress(v)
> 
> 
> 
> cleanEx()
> nameEx("dcorMatrix")
> ### * dcorMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcorMatrix
> ### Title: Compute Distance Correlation Matrix.
> ### Aliases: dcorMatrix
> 
> ### ** Examples
> 
> ## Load data so that samples (countries) are columns and econometric
> ##   variables are rows.
> M <- t(LifeCycleSavings)
> ## Compute all pairs distance correlation between econometric variables.
> DCOR <- dcorMatrix(M)
> 
> 
> 
> cleanEx()
> nameEx("dcorMatrixNA")
> ### * dcorMatrixNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcorMatrixNA
> ### Title: Compute Distance Correlation Matrix with Missing Values in Data.
> ### Aliases: dcorMatrixNA
> 
> ### ** Examples
> 
> ## Load data so that samples (countries) are columns and econometric
> ##   variables are rows.
> M <- t(LifeCycleSavings)
> ## Insert a missing value.
> M[1,1] <- NA
> ## Compute all-pairs distance correlation between econometric variables.
> Results <- dcorMatrixNA(M)
Computing distance correlation up through variable 1 of 5...
> 
> 
> 
> cleanEx()
> nameEx("dcorSingle")
> ### * dcorSingle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dcorSingle
> ### Title: Single Pair Distance Correlation.
> ### Aliases: dcorSingle
> 
> ### ** Examples
> 
> ## Load data so that samples (countries) are columns and econometric
> ##   variables are rows.
> M <- t(LifeCycleSavings)
> ## Compute distance correlation between two econometric variables.
> d <- dcorSingle(M[1,], M[2,])
> 
> 
> 
> cleanEx()
> nameEx("gsplom")
> ### * gsplom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gsplom
> ### Title: Glyph SPLOM Workflow Wrapper
> ### Aliases: gsplom gsplomCore gsplomPlot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Load data so that samples (countries) are columns and econometric
> ##D ##   variables are rows.
> ##D M <- t(LifeCycleSavings)
> ##D pdf("/mypath/gsplom.pdf")
> ##D R <- gsplom(M)
> ##D dev.off()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("logicClassMatrix")
> ### * logicClassMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logicClassMatrix
> ### Title: Compute Logical Dependency Class Matrix.
> ### Aliases: logicClassMatrix
> 
> ### ** Examples
> 
> M <- t(LifeCycleSavings)
> CLS <- logicClassMatrix(M, intervals=apply(M,1,sd)/2, frac.conf=0.2)
> M[1,1] <- NA
> CLS.NA <- logicClassMatrix(M, intervals=apply(M,1,function(x)sd(x,na.rm=TRUE))/2, frac.conf=0.2)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.151 0.007 0.167 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
